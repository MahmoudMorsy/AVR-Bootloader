
Bootloader.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000022a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  0000022a  0000029e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009b5  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006c5  00000000  00000000  00000d21  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000049d  00000000  00000000  000013e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  00001884  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000046b  00000000  00000000  0000194c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000413  00000000  00000000  00001db7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  000021ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e2       	ldi	r30, 0x2A	; 42
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 36       	cpi	r26, 0x6A	; 106
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 13 01 	jmp	0x226	; 0x226 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "Common/Common_Macros.h"
#include "Common/Common_Types.h"
#include "Mcal/Eeprom/Eeprom.h"
uint8 Data1,Data2,Data3,Data4,Data5;
int main(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	2a 97       	sbiw	r28, 0x0a	; 10
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
    /* Replace with your application code */
	uint8 Data[] = {1,2,3,4,5,6,7,8,9,10};
  a6:	8a e0       	ldi	r24, 0x0A	; 10
  a8:	e0 e6       	ldi	r30, 0x60	; 96
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	de 01       	movw	r26, r28
  ae:	11 96       	adiw	r26, 0x01	; 1
  b0:	01 90       	ld	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	8a 95       	dec	r24
  b6:	e1 f7       	brne	.-8      	; 0xb0 <main+0x1e>
	Eeprom_WriteBuffer(20,Data,10);
  b8:	4a e0       	ldi	r20, 0x0A	; 10
  ba:	50 e0       	ldi	r21, 0x00	; 0
  bc:	be 01       	movw	r22, r28
  be:	6f 5f       	subi	r22, 0xFF	; 255
  c0:	7f 4f       	sbci	r23, 0xFF	; 255
  c2:	84 e1       	ldi	r24, 0x14	; 20
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	0e 94 ad 00 	call	0x15a	; 0x15a <Eeprom_WriteBuffer>
	Eeprom_ReadBuffer(15, Data, 10);
  ca:	4a e0       	ldi	r20, 0x0A	; 10
  cc:	50 e0       	ldi	r21, 0x00	; 0
  ce:	be 01       	movw	r22, r28
  d0:	6f 5f       	subi	r22, 0xFF	; 255
  d2:	7f 4f       	sbci	r23, 0xFF	; 255
  d4:	8f e0       	ldi	r24, 0x0F	; 15
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <Eeprom_ReadBuffer>
	Eeprom_WriteBuffer(20,Data,10);
  dc:	4a e0       	ldi	r20, 0x0A	; 10
  de:	50 e0       	ldi	r21, 0x00	; 0
  e0:	be 01       	movw	r22, r28
  e2:	6f 5f       	subi	r22, 0xFF	; 255
  e4:	7f 4f       	sbci	r23, 0xFF	; 255
  e6:	84 e1       	ldi	r24, 0x14	; 20
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 ad 00 	call	0x15a	; 0x15a <Eeprom_WriteBuffer>
	//Eeprom_WriteByte(1021, 9);
	//Eeprom_ReadByte(1021, &Data4);
	//Eeprom_WriteByte(1022, 9);
	//Eeprom_WriteByte(1023, 5);
	//Eeprom_ReadByte(1023, &Data5);
	DDRA = 0xFF;
  ee:	8f ef       	ldi	r24, 0xFF	; 255
  f0:	8a bb       	out	0x1a, r24	; 26
    while (1) 
    {
		SET_BIT(PORTA, 5);
  f2:	dd 9a       	sbi	0x1b, 5	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f4:	2f e3       	ldi	r18, 0x3F	; 63
  f6:	8d e0       	ldi	r24, 0x0D	; 13
  f8:	93 e0       	ldi	r25, 0x03	; 3
  fa:	21 50       	subi	r18, 0x01	; 1
  fc:	80 40       	sbci	r24, 0x00	; 0
  fe:	90 40       	sbci	r25, 0x00	; 0
 100:	e1 f7       	brne	.-8      	; 0xfa <main+0x68>
 102:	00 c0       	rjmp	.+0      	; 0x104 <main+0x72>
 104:	00 00       	nop
		_delay_ms(1000);
		CLEAR_BIT(PORTA, 5);
 106:	dd 98       	cbi	0x1b, 5	; 27
 108:	2f e3       	ldi	r18, 0x3F	; 63
 10a:	8d e0       	ldi	r24, 0x0D	; 13
 10c:	93 e0       	ldi	r25, 0x03	; 3
 10e:	21 50       	subi	r18, 0x01	; 1
 110:	80 40       	sbci	r24, 0x00	; 0
 112:	90 40       	sbci	r25, 0x00	; 0
 114:	e1 f7       	brne	.-8      	; 0x10e <main+0x7c>
 116:	00 c0       	rjmp	.+0      	; 0x118 <main+0x86>
 118:	00 00       	nop
 11a:	eb cf       	rjmp	.-42     	; 0xf2 <main+0x60>

0000011c <Eeprom_WriteByte>:
{
	/* Checking if the target address is valid */
	if ((Param_Address >= EEPROM_START_ADDRESS) || (Param_Address <= EEPROM_LAST_ADDRESS))
	{
		/* Disable Global Interrupts */
		cli();
 11c:	f8 94       	cli
		/* Poll until EEWE bit in EECR register is equal to 0 */
		while (BIT_IS_SET(EEPROM_EECR,EEWE));
 11e:	e1 99       	sbic	0x1c, 1	; 28
 120:	fe cf       	rjmp	.-4      	; 0x11e <Eeprom_WriteByte+0x2>
		/* Poll until SPMEN bit in SPMCR register is equal to 0 */
		while (BIT_IS_SET(EEPROM_SPMCR,SPMEN));
 122:	07 b6       	in	r0, 0x37	; 55
 124:	00 fc       	sbrc	r0, 0
 126:	fd cf       	rjmp	.-6      	; 0x122 <Eeprom_WriteByte+0x6>
		/* Write EEPROM target address to EEAR */
		EEPROM_EEAR = Param_Address;
 128:	9f bb       	out	0x1f, r25	; 31
 12a:	8e bb       	out	0x1e, r24	; 30
		/* Write data into EEPROM buffer register EEDR */
		EEPROM_EEDR = Param_Data;
 12c:	6d bb       	out	0x1d, r22	; 29
		/* Write logical one to EEMWE bit in EECR register */
		SET_BIT(EEPROM_EECR, EEMWE);
 12e:	e2 9a       	sbi	0x1c, 2	; 28
		/* Write logical one to EEWE bit in EECR to trigger the EEPROM write operation */
		SET_BIT(EEPROM_EECR, EEWE);
 130:	e1 9a       	sbi	0x1c, 1	; 28
		/* Wait until EEWE bit is cleared (EEPROM write finished) */
		while (BIT_IS_SET(EEPROM_EECR,EEWE));
 132:	e1 99       	sbic	0x1c, 1	; 28
 134:	fe cf       	rjmp	.-4      	; 0x132 <Eeprom_WriteByte+0x16>
		/* Re-enable Global Interrupts */
		sei();
 136:	78 94       	sei
	else
	{
		/* Return an error state */
		return FALSE;
	}
}
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	08 95       	ret

0000013c <Eeprom_ReadByte>:
{
	/* Checking if the target address is valid */
	if ((Param_Address >= EEPROM_START_ADDRESS) || (Param_Address <= EEPROM_LAST_ADDRESS))
	{
		/* Disable Global Interrupts */
		cli();
 13c:	f8 94       	cli
		/* Poll until EEWE bit in EECR register is equal to 0 */
		while (BIT_IS_SET(EEPROM_EECR,EEWE));
 13e:	e1 99       	sbic	0x1c, 1	; 28
 140:	fe cf       	rjmp	.-4      	; 0x13e <Eeprom_ReadByte+0x2>
		/* Poll until SPMEN bit in SPMCR register is equal to 0 */
		while (BIT_IS_SET(EEPROM_SPMCR,SPMEN));
 142:	07 b6       	in	r0, 0x37	; 55
 144:	00 fc       	sbrc	r0, 0
 146:	fd cf       	rjmp	.-6      	; 0x142 <Eeprom_ReadByte+0x6>
		/* Write EEPROM target address to EEAR */
		EEPROM_EEAR = Param_Address;
 148:	9f bb       	out	0x1f, r25	; 31
 14a:	8e bb       	out	0x1e, r24	; 30
		/* Write logical one to EERE bit in EECR to trigger the EEPROM read operation */
		SET_BIT(EEPROM_EECR, EERE);
 14c:	e0 9a       	sbi	0x1c, 0	; 28
		/* Return the read data from EEPROM to user */
		*Param_DataOutPtr = EEPROM_EEDR;
 14e:	8d b3       	in	r24, 0x1d	; 29
 150:	fb 01       	movw	r30, r22
 152:	80 83       	st	Z, r24
		/* Re-enable Global Interrupts */
		sei();
 154:	78 94       	sei
	else
	{
		/* Return an error state */
		return FALSE;
	}
}
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	08 95       	ret

0000015a <Eeprom_WriteBuffer>:

boolean Eeprom_WriteBuffer(uint16 Param_StartAddress, uint8* Param_DataPtr, uint16 Param_NumberOfBytes)
{
 15a:	ef 92       	push	r14
 15c:	ff 92       	push	r15
 15e:	0f 93       	push	r16
 160:	1f 93       	push	r17
 162:	cf 93       	push	r28
 164:	df 93       	push	r29
 166:	ec 01       	movw	r28, r24
	/* Return variable */
	boolean Loc_ReturnValue = TRUE;
	
	/* Checking if the target address and number of bytes are valid */
	if ( (Param_StartAddress >= EEPROM_START_ADDRESS) && (Param_NumberOfBytes > 0)
 168:	41 15       	cp	r20, r1
 16a:	51 05       	cpc	r21, r1
 16c:	d9 f0       	breq	.+54     	; 0x1a4 <Eeprom_WriteBuffer+0x4a>
	   && ((Param_StartAddress + Param_NumberOfBytes) <= (EEPROM_LAST_ADDRESS+1)) )
 16e:	7a 01       	movw	r14, r20
 170:	e8 0e       	add	r14, r24
 172:	f9 1e       	adc	r15, r25
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	e8 16       	cp	r14, r24
 178:	84 e0       	ldi	r24, 0x04	; 4
 17a:	f8 06       	cpc	r15, r24
 17c:	a8 f4       	brcc	.+42     	; 0x1a8 <Eeprom_WriteBuffer+0x4e>
	{
		for (uint16 Loc_CurrentAddress = Param_StartAddress; Loc_CurrentAddress<(Param_StartAddress+Param_NumberOfBytes); Loc_CurrentAddress++)
 17e:	ce 15       	cp	r28, r14
 180:	df 05       	cpc	r29, r15
 182:	a0 f4       	brcc	.+40     	; 0x1ac <Eeprom_WriteBuffer+0x52>
 184:	06 2f       	mov	r16, r22
 186:	17 2f       	mov	r17, r23
		{
			if (Eeprom_WriteByte(Loc_CurrentAddress, Param_DataPtr[Loc_CurrentAddress-Param_StartAddress]) == FALSE)
 188:	f8 01       	movw	r30, r16
 18a:	61 91       	ld	r22, Z+
 18c:	8f 01       	movw	r16, r30
 18e:	ce 01       	movw	r24, r28
 190:	0e 94 8e 00 	call	0x11c	; 0x11c <Eeprom_WriteByte>
 194:	88 23       	and	r24, r24
 196:	61 f0       	breq	.+24     	; 0x1b0 <Eeprom_WriteBuffer+0x56>
	
	/* Checking if the target address and number of bytes are valid */
	if ( (Param_StartAddress >= EEPROM_START_ADDRESS) && (Param_NumberOfBytes > 0)
	   && ((Param_StartAddress + Param_NumberOfBytes) <= (EEPROM_LAST_ADDRESS+1)) )
	{
		for (uint16 Loc_CurrentAddress = Param_StartAddress; Loc_CurrentAddress<(Param_StartAddress+Param_NumberOfBytes); Loc_CurrentAddress++)
 198:	21 96       	adiw	r28, 0x01	; 1
 19a:	ce 15       	cp	r28, r14
 19c:	df 05       	cpc	r29, r15
 19e:	a0 f3       	brcs	.-24     	; 0x188 <Eeprom_WriteBuffer+0x2e>
}

boolean Eeprom_WriteBuffer(uint16 Param_StartAddress, uint8* Param_DataPtr, uint16 Param_NumberOfBytes)
{
	/* Return variable */
	boolean Loc_ReturnValue = TRUE;
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	07 c0       	rjmp	.+14     	; 0x1b2 <Eeprom_WriteBuffer+0x58>
		}
	}
	else
	{
		/* Return an error state */
		Loc_ReturnValue = FALSE;
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	05 c0       	rjmp	.+10     	; 0x1b2 <Eeprom_WriteBuffer+0x58>
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	03 c0       	rjmp	.+6      	; 0x1b2 <Eeprom_WriteBuffer+0x58>
}

boolean Eeprom_WriteBuffer(uint16 Param_StartAddress, uint8* Param_DataPtr, uint16 Param_NumberOfBytes)
{
	/* Return variable */
	boolean Loc_ReturnValue = TRUE;
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	01 c0       	rjmp	.+2      	; 0x1b2 <Eeprom_WriteBuffer+0x58>
	{
		for (uint16 Loc_CurrentAddress = Param_StartAddress; Loc_CurrentAddress<(Param_StartAddress+Param_NumberOfBytes); Loc_CurrentAddress++)
		{
			if (Eeprom_WriteByte(Loc_CurrentAddress, Param_DataPtr[Loc_CurrentAddress-Param_StartAddress]) == FALSE)
			{
				Loc_ReturnValue = FALSE;
 1b0:	80 e0       	ldi	r24, 0x00	; 0
	{
		/* Return an error state */
		Loc_ReturnValue = FALSE;
	}
	return Loc_ReturnValue;
}
 1b2:	df 91       	pop	r29
 1b4:	cf 91       	pop	r28
 1b6:	1f 91       	pop	r17
 1b8:	0f 91       	pop	r16
 1ba:	ff 90       	pop	r15
 1bc:	ef 90       	pop	r14
 1be:	08 95       	ret

000001c0 <Eeprom_ReadBuffer>:
boolean Eeprom_ReadBuffer(uint16 Param_StartAddress, uint8* Param_DataOutPtr, uint16 Param_NumberOfBytes)
{
 1c0:	ef 92       	push	r14
 1c2:	ff 92       	push	r15
 1c4:	0f 93       	push	r16
 1c6:	1f 93       	push	r17
 1c8:	cf 93       	push	r28
 1ca:	df 93       	push	r29
 1cc:	ec 01       	movw	r28, r24
	/* Return variable */
	boolean Loc_ReturnValue = TRUE;
	
	/* Checking if the target address and number of bytes are valid */
	if ( (Param_StartAddress >= EEPROM_START_ADDRESS) && (Param_NumberOfBytes > 0)
 1ce:	41 15       	cp	r20, r1
 1d0:	51 05       	cpc	r21, r1
 1d2:	d9 f0       	breq	.+54     	; 0x20a <Eeprom_ReadBuffer+0x4a>
	&& ((Param_StartAddress + Param_NumberOfBytes) <= (EEPROM_LAST_ADDRESS+1)) )
 1d4:	7a 01       	movw	r14, r20
 1d6:	e8 0e       	add	r14, r24
 1d8:	f9 1e       	adc	r15, r25
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	e8 16       	cp	r14, r24
 1de:	84 e0       	ldi	r24, 0x04	; 4
 1e0:	f8 06       	cpc	r15, r24
 1e2:	a8 f4       	brcc	.+42     	; 0x20e <Eeprom_ReadBuffer+0x4e>
	{
		for (uint16 Loc_CurrentAddress = Param_StartAddress; Loc_CurrentAddress<(Param_StartAddress+Param_NumberOfBytes); Loc_CurrentAddress++)
 1e4:	ce 15       	cp	r28, r14
 1e6:	df 05       	cpc	r29, r15
 1e8:	a0 f4       	brcc	.+40     	; 0x212 <Eeprom_ReadBuffer+0x52>
 1ea:	06 2f       	mov	r16, r22
 1ec:	17 2f       	mov	r17, r23
		{
			if (Eeprom_ReadByte(Loc_CurrentAddress, &(Param_DataOutPtr[Loc_CurrentAddress-Param_StartAddress])) == FALSE)
 1ee:	b8 01       	movw	r22, r16
 1f0:	ce 01       	movw	r24, r28
 1f2:	0e 94 9e 00 	call	0x13c	; 0x13c <Eeprom_ReadByte>
 1f6:	88 23       	and	r24, r24
 1f8:	71 f0       	breq	.+28     	; 0x216 <Eeprom_ReadBuffer+0x56>
	
	/* Checking if the target address and number of bytes are valid */
	if ( (Param_StartAddress >= EEPROM_START_ADDRESS) && (Param_NumberOfBytes > 0)
	&& ((Param_StartAddress + Param_NumberOfBytes) <= (EEPROM_LAST_ADDRESS+1)) )
	{
		for (uint16 Loc_CurrentAddress = Param_StartAddress; Loc_CurrentAddress<(Param_StartAddress+Param_NumberOfBytes); Loc_CurrentAddress++)
 1fa:	21 96       	adiw	r28, 0x01	; 1
 1fc:	0f 5f       	subi	r16, 0xFF	; 255
 1fe:	1f 4f       	sbci	r17, 0xFF	; 255
 200:	ce 15       	cp	r28, r14
 202:	df 05       	cpc	r29, r15
 204:	a0 f3       	brcs	.-24     	; 0x1ee <Eeprom_ReadBuffer+0x2e>
	return Loc_ReturnValue;
}
boolean Eeprom_ReadBuffer(uint16 Param_StartAddress, uint8* Param_DataOutPtr, uint16 Param_NumberOfBytes)
{
	/* Return variable */
	boolean Loc_ReturnValue = TRUE;
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	07 c0       	rjmp	.+14     	; 0x218 <Eeprom_ReadBuffer+0x58>
		}
	}
	else
	{
		/* Return an error state */
		Loc_ReturnValue = FALSE;
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	05 c0       	rjmp	.+10     	; 0x218 <Eeprom_ReadBuffer+0x58>
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	03 c0       	rjmp	.+6      	; 0x218 <Eeprom_ReadBuffer+0x58>
	return Loc_ReturnValue;
}
boolean Eeprom_ReadBuffer(uint16 Param_StartAddress, uint8* Param_DataOutPtr, uint16 Param_NumberOfBytes)
{
	/* Return variable */
	boolean Loc_ReturnValue = TRUE;
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	01 c0       	rjmp	.+2      	; 0x218 <Eeprom_ReadBuffer+0x58>
	{
		for (uint16 Loc_CurrentAddress = Param_StartAddress; Loc_CurrentAddress<(Param_StartAddress+Param_NumberOfBytes); Loc_CurrentAddress++)
		{
			if (Eeprom_ReadByte(Loc_CurrentAddress, &(Param_DataOutPtr[Loc_CurrentAddress-Param_StartAddress])) == FALSE)
			{
				Loc_ReturnValue = FALSE;
 216:	80 e0       	ldi	r24, 0x00	; 0
	{
		/* Return an error state */
		Loc_ReturnValue = FALSE;
	}
	return Loc_ReturnValue;
}
 218:	df 91       	pop	r29
 21a:	cf 91       	pop	r28
 21c:	1f 91       	pop	r17
 21e:	0f 91       	pop	r16
 220:	ff 90       	pop	r15
 222:	ef 90       	pop	r14
 224:	08 95       	ret

00000226 <_exit>:
 226:	f8 94       	cli

00000228 <__stop_program>:
 228:	ff cf       	rjmp	.-2      	; 0x228 <__stop_program>
